{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/janidu/Documents/GitHub/NextGen-Builds/NextGen-Builds/frontend/src/app/components/SplitText.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { SplitText as GSAPSplitText } from 'gsap/SplitText';\nimport { useGSAP } from '@gsap/react';\n\ngsap.registerPlugin(ScrollTrigger, GSAPSplitText, useGSAP);\n\nexport interface SplitTextProps {\n  text: string;\n  className?: string;\n  delay?: number;\n  duration?: number;\n  ease?: string | ((t: number) => number);\n  splitType?: 'chars' | 'words' | 'lines' | 'words, chars';\n  from?: gsap.TweenVars;\n  to?: gsap.TweenVars;\n  threshold?: number;\n  rootMargin?: string;\n  tag?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span';\n  textAlign?: React.CSSProperties['textAlign'];\n  onLetterAnimationComplete?: () => void;\n}\n\nconst SplitText: React.FC<SplitTextProps> = ({\n  text,\n  className = '',\n  delay = 100,\n  duration = 0.6,\n  ease = 'power3.out',\n  splitType = 'chars',\n  from = { opacity: 0, y: 40 },\n  to = { opacity: 1, y: 0 },\n  threshold = 0.1,\n  rootMargin = '-100px',\n  textAlign = 'center',\n  tag = 'p',\n  onLetterAnimationComplete\n}) => {\n  const ref = useRef<HTMLParagraphElement>(null);\n  const animationCompletedRef = useRef(false);\n  const [fontsLoaded, setFontsLoaded] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (document.fonts.status === 'loaded') {\n      setFontsLoaded(true);\n    } else {\n      document.fonts.ready.then(() => {\n        setFontsLoaded(true);\n      });\n    }\n  }, []);\n\n  useGSAP(\n    () => {\n      if (!ref.current || !text || !fontsLoaded) return;\n\n      const el = ref.current as HTMLElement & {\n        _rbsplitInstance?: GSAPSplitText;\n      };\n\n      if (el._rbsplitInstance) {\n        try {\n          el._rbsplitInstance.revert();\n        } catch (_) {}\n        el._rbsplitInstance = undefined;\n      }\n\n      const startPct = (1 - threshold) * 100;\n      const marginMatch = /^(-?\\d+(?:\\.\\d+)?)(px|em|rem|%)?$/.exec(rootMargin);\n      const marginValue = marginMatch ? parseFloat(marginMatch[1]) : 0;\n      const marginUnit = marginMatch ? marginMatch[2] || 'px' : 'px';\n      const sign =\n        marginValue === 0\n          ? ''\n          : marginValue < 0\n            ? `-=${Math.abs(marginValue)}${marginUnit}`\n            : `+=${marginValue}${marginUnit}`;\n      const start = `top ${startPct}%${sign}`;\n      let targets: Element[] = [];\n      const assignTargets = (self: GSAPSplitText) => {\n        if (splitType.includes('chars') && self.chars.length) targets = self.chars;\n        if (!targets.length && splitType.includes('words') && self.words.length) targets = self.words;\n        if (!targets.length && splitType.includes('lines') && self.lines.length) targets = self.lines;\n        if (!targets.length) targets = self.chars || self.words || self.lines;\n      };\n      const splitInstance = new GSAPSplitText(el, {\n        type: splitType,\n        smartWrap: true,\n        autoSplit: splitType === 'lines',\n        linesClass: 'split-line',\n        wordsClass: 'split-word',\n        charsClass: 'split-char',\n        reduceWhiteSpace: false,\n        onSplit: (self: GSAPSplitText) => {\n          assignTargets(self);\n          return gsap.fromTo(\n            targets,\n            { ...from },\n            {\n              ...to,\n              duration,\n              ease,\n              stagger: delay / 1000,\n              scrollTrigger: {\n                trigger: el,\n                start,\n                once: true,\n                fastScrollEnd: true,\n                anticipatePin: 0.4\n              },\n              onComplete: () => {\n                animationCompletedRef.current = true;\n                onLetterAnimationComplete?.();\n              },\n              willChange: 'transform, opacity',\n              force3D: true\n            }\n          );\n        }\n      });\n      el._rbsplitInstance = splitInstance;\n      return () => {\n        ScrollTrigger.getAll().forEach(st => {\n          if (st.trigger === el) st.kill();\n        });\n        try {\n          splitInstance.revert();\n        } catch (_) {}\n        el._rbsplitInstance = undefined;\n      };\n    },\n    {\n      dependencies: [\n        text,\n        delay,\n        duration,\n        ease,\n        splitType,\n        JSON.stringify(from),\n        JSON.stringify(to),\n        threshold,\n        rootMargin,\n        fontsLoaded,\n        onLetterAnimationComplete\n      ],\n      scope: ref\n    }\n  );\n\n  const renderTag = () => {\n    const style: React.CSSProperties = {\n      textAlign,\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'normal',\n      wordWrap: 'break-word',\n      willChange: 'transform, opacity'\n    };\n    const classes = `split-parent ${className}`;\n    switch (tag) {\n      case 'h1':\n        return (\n          <h1 ref={ref} style={style} className={classes}>\n            {text}\n          </h1>\n        );\n      case 'h2':\n        return (\n          <h2 ref={ref} style={style} className={classes}>\n            {text}\n          </h2>\n        );\n      case 'h3':\n        return (\n          <h3 ref={ref} style={style} className={classes}>\n            {text}\n          </h3>\n        );\n      case 'h4':\n        return (\n          <h4 ref={ref} style={style} className={classes}>\n            {text}\n          </h4>\n        );\n      case 'h5':\n        return (\n          <h5 ref={ref} style={style} className={classes}>\n            {text}\n          </h5>\n        );\n      case 'h6':\n        return (\n          <h6 ref={ref} style={style} className={classes}>\n            {text}\n          </h6>\n        );\n      default:\n        return (\n          <p ref={ref} style={style} className={classes}>\n            {text}\n          </p>\n        );\n    }\n  };\n  return renderTag();\n};\n\nexport default SplitText;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///home/janidu/Documents/GitHub/NextGen-Builds/NextGen-Builds/frontend/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { Box, Button, Typography } from '@mui/material';\nimport dynamic from 'next/dynamic';\nimport { motion } from 'framer-motion';\nimport DecryptedText from './components/DecryptedText';\nimport SplitText from \"./components/SplitText\";\n\n\n\n// Dynamically import SplineWrapper to avoid SSR issues\nconst SplineWrapper = dynamic(() => import('./components/SplineWrapper'), { ssr: false });\n\nconst handleAnimationComplete = () => {\n  console.log('All letters have animated!');\n};\n\nexport default function LandingPage() {\n  return (\n    <Box\n      sx={{\n        position: 'relative',\n        width: '100%',\n        height: '100vh',\n        background: 'rgb(128, 128, 128)',\n        overflow: 'hidden',\n        border: '2px solid red', //tetsting\n      }}\n    >\n      {/* Fullscreen Spline animation */}\n      <Box\n        sx={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          zIndex: 0,\n        }}\n      >\n        <SplineWrapper />\n      </Box>\n\n\n      {/* Centered styled text */}\n<Box\n  sx={{\n    \n    position: 'absolute',\n    top: '20%',\n    left: '16%',\n    transform: 'translate(-50%, -50%)',\n    textAlign: 'center',\n    zIndex: 10,\n    border: '2px solid red', // testing\n\n    display: 'flex',           // must be 'flex' to use flex properties\n    flexDirection: 'row-reverse',\n    flexWrap: 'nowrap',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    alignContent: 'stretch',\n    \n\n  }}\n>\n  <SplitText\n  text=\"Hello, GSAP!\"\n  className=\"text-2xl font-semibold text-center\"\n  delay={100}\n  duration={0.6}\n  ease=\"power3.out\"\n  splitType=\"chars\"\n  from={{ opacity: 0, y: 40 }}\n  to={{ opacity: 1, y: 0 }}\n  threshold={0.1}\n  rootMargin=\"-100px\"\n  textAlign=\"center\"\n  onLetterAnimationComplete={handleAnimationComplete} \n\n    //  style={{\n    //   fontSize: 'clamp(2rem, 6vw, 5rem)',  // responsive size\n    //   fontWeight: 700,\n    //   color: '#222',                       // dark gray for white background\n    //   lineHeight: 1.1,\n    //   whiteSpace: 'pre-line',              // allows \\n to make new lines\n    // }}\n\n      style={{\n    fontSize: 'clamp(2rem, 6vw, 5rem)',\n    fontWeight: 800,\n    textTransform: 'uppercase',\n    background: 'linear-gradient(90deg, #060301ff, #ee9609ff)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n    whiteSpace: 'pre-line',\n    \n  }}\n\n  />\n\n</Box>\n      \n    </Box>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAGA;;AANA;;;;;AAUA,uDAAuD;AACvD,MAAM,gBAAgB,IAAA,0KAAO;;;;;;IAA+C,KAAK;;AAEjF,MAAM,0BAA0B;IAC9B,QAAQ,GAAG,CAAC;AACd;AAEe,SAAS;IACtB,qBACE,8OAAC,+LAAG;QACF,IAAI;YACF,UAAU;YACV,OAAO;YACP,QAAQ;YACR,YAAY;YACZ,UAAU;YACV,QAAQ;QACV;;0BAGA,8OAAC,+LAAG;gBACF,IAAI;oBACF,UAAU;oBACV,KAAK;oBACL,MAAM;oBACN,OAAO;oBACP,QAAQ;oBACR,QAAQ;gBACV;0BAEA,cAAA,8OAAC;;;;;;;;;;0BAKT,8OAAC,+LAAG;gBACF,IAAI;oBAEF,UAAU;oBACV,KAAK;oBACL,MAAM;oBACN,WAAW;oBACX,WAAW;oBACX,QAAQ;oBACR,QAAQ;oBAER,SAAS;oBACT,eAAe;oBACf,UAAU;oBACV,gBAAgB;oBAChB,YAAY;oBACZ,cAAc;gBAGhB;0BAEA,cAAA,8OAAC,iJAAS;oBACV,MAAK;oBACL,WAAU;oBACV,OAAO;oBACP,UAAU;oBACV,MAAK;oBACL,WAAU;oBACV,MAAM;wBAAE,SAAS;wBAAG,GAAG;oBAAG;oBAC1B,IAAI;wBAAE,SAAS;wBAAG,GAAG;oBAAE;oBACvB,WAAW;oBACX,YAAW;oBACX,WAAU;oBACV,2BAA2B;oBAEzB,YAAY;oBACZ,4DAA4D;oBAC5D,qBAAqB;oBACrB,2EAA2E;oBAC3E,qBAAqB;oBACrB,wEAAwE;oBACxE,KAAK;oBAEH,OAAO;wBACT,UAAU;wBACV,YAAY;wBACZ,eAAe;wBACf,YAAY;wBACZ,sBAAsB;wBACtB,qBAAqB;wBACrB,YAAY;oBAEd;;;;;;;;;;;;;;;;;AAQF","debugId":null}}]
}